apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-java-hello-world
  labels:
    # K8s standard label - https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    # Tools around assume such naming convention and building product around it. Ex Istio and Kiali
    app.kubernetes.io/name: k8s-java-hello-world
    # K8s standard label - https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    # Tools around assume such naming convention and building product around it. Ex Istio and Kiali
    app.kubernetes.io/version: 1.0.0
    # K8s standard label - https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/
    # Tools around assume such naming convention and building product around it. Ex Istio and Kiali
    app.kubernetes.io/part-of: k8s-java-hello-world
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: k8s-java-hello-world
  template:
    metadata:
      labels:
        app.kubernetes.io/name: k8s-java-hello-world
    spec:
      # Istio assumes k8s's identity and later on uses for authentication.
      # Apart of Istio this is best practices run services with its own account and therefore
      # required privileges (roles and clusterRoles)
      serviceAccountName: k8s-java-hello-world
      securityContext:
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
      containers:
        - name: k8s-java-hello-world
          image: registry.digitalocean.com/learning/k8s-java-hello-world
#          kubectl explain pod.spec.containers.readinessProbe
#          timeoutSeconds: Number of seconds after which the probe times out. Defaults to 1 second.
#          periodSeconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum
#          value is 1
#          failureThreshold: Minimum consecutive failures for the probe to be considered failed after
#          having succeeded. Defaults to 3. Minimum value is 1
          readinessProbe:
            httpGet:
              path: /health
              port: 8090
          livenessProbe:
            httpGet:
              path: /health
              port: 8090
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            # Different port for metrics and healthchecks solve problem Istio vs Kubelet
            - name: http-metrics
              containerPort: 8090
              protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 768Mi
            requests:
              cpu: 100m
              memory: 768Mi
          volumeMounts:
            - mountPath: /etc/app/config/application.yaml
              name: application-configuration
              subPath: application.yaml
              readOnly: true
            - mountPath: /etc/app/resources
              name: logging-configuration
              readOnly: true
          env:
            - name: "JAVA_TOOL_OPTIONS"
              value: |
                -Xms256M
                -Xmx512M
                -Dspring.config.location=file:/etc/app/config/
                -Dlogging.config=/etc/app/resources/logback.xml
                -Dlogback.statusListenerClass=ch.qos.logback.core.status.OnConsoleStatusListener
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - configMap:
            name: k8s-java-hello-world-configuration
          name: application-configuration
        - configMap:
            name: k8s-java-hello-world-logging-configuration
          name: logging-configuration
